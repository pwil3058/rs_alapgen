%{
use std::collections::HashMap;
use std::convert::From;
use std::str::FromStr;

#[derive(Debug, Default, Clone)]
struct AttributeData {
    id: String,
    value: f64,
}

impl From<lexan::Token<AATerminal>> for AttributeData {
    fn from(input: lexan::Token<AATerminal>) -> Self {
        let mut attr = AttributeData::default();
        match input.tag() {
            AATerminal::NUMBER => {
                attr.value = f64::from_str(input.lexeme()).unwrap();
            }
            AATerminal::ID => {
                attr.id = input.lexeme().to_string();
            }
            _ => (),
        };
        attr
    }
}

impl From<lalr1plus::Error<AATerminal>> for AttributeData {
    fn from(_error: lalr1plus::Error<AATerminal>) -> Self {
        AttributeData::default()
    }
}

const UNDEFINED_VARIABLE: u32 = 1 << 0;
const DIVIDE_BY_ZERO: u32 = 1 << 1;
const SYNTAX_ERROR: u32 = 1 << 2;
const LEXICAL_ERROR: u32 = 1 << 3;


struct Calc {
    errors: u32,
    variables: HashMap<String, f64>,
}
%}

%token          EOL     (\n)
%token          PLUS    "+"
%token          MINUS   "-"
%token          TIMES   "*"
%token          DIVIDE  "/"
%token          ASSIGN  "="
%token          NUMBER  ([0-9]+(\.[0-9]+){0,1})
%token          ID      ([a-zA-Z]+)
%token          LPR     "("
%token          RPR     ")"

%skip   ([\t\r ]+)

%right  UMINUS
%left   "*" "/"
%left   "+" "-"
%left   EOL

%%
Line: SetUp Expr ?(errors > 0?) !{report_errors();!}
    | SetUp Expr !{writeln($2.value);!}
    | SetUp ID "=" Expr ?(errors == 0?) !{variables[$2.id] = $4.value;!}
    | SetUp ID "=" Expr !{report_errors();!}
    | Line EOL Line
    | Line EOL
    | %error !{errors |= Errors.syntaxError;!}
    .

SetUp: !{errors = 0;!}.

Expr: Expr "+" Expr ?($1.value == 0?) !{$$.value = $3.value;!}
    | Expr "+" Expr ?($3.value == 0?) !{$$.value = $1.value;!}
    | Expr "+" Expr !{$$.value = $1.value + $3.value;!}
    | Expr "-" Expr ?($1.value == 0?) !{$$.value = -$3.value;!}
    | Expr "-" Expr ?($3.value == 0?) !{$$.value = $1.value;!}
    | Expr "-" Expr !{$$.value = $1.value - $3.value;!}
    | Expr "*" Expr ?($1.value == 0 || $3.value == 0?) !{$$.value = -$3.value;!}
    | Expr "*" Expr ?($1.value == 1?) !{$$.value = $3.value;!}
    | Expr "*" Expr ?($3.value == 1?) !{$$.value = $1.value;!}
    | Expr "*" Expr !{$$.value = $1.value * $3.value;!}
    | Expr "/" Expr ?($3.value == 1?) !{$$.value = $1.value;!}
    | Expr "/" Expr ?($3.value == 0?) !{errors |= Errors.divideByZero;!}
    | Expr "/" Expr ?($1.value == 0?) !{$$.value = 0;!}
    | Expr "/" Expr !{$$.value = $1.value / $3.value;!}
    | "(" Expr ")" !{$$.value = $2.value;!}
    | "-" Expr %prec UMINUS !{$$.value = -$2.value;!}
    | NUMBER !{$$.value = $1.value;!}
    | ID ?($1.id in variables?) !{$$.value = variables[$1.id];!}
    | ID !{errors |= Errors.undefinedVariables; $$.value = 0;!}
    .
